{
	"info": {
		"_postman_id": "d3ed0cab-1bac-4b53-8e9c-fececf83d851",
		"name": "hardware tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "tests",
			"item": [
				{
					"name": "hardware controller",
					"item": [
						{
							"name": "Add hardware controller",
							"item": [
								{
									"name": "Add hardward controller",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"response code should be 200 OK\", () => {\r",
													"    pm.expect(pm.response.status).to.be.ok;\r",
													"})\r",
													"\r",
													"pm.test(\"Hardware serial number should be equal to hardware serial number\", () => {\r",
													"    pm.expect(responseJson.serialNumber).to.equal(pm.environment.get(\"hardwareSerialNumber\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Hardware name should be equal to passed name\", () => {\r",
													"    pm.expect(responseJson.name).to.equal(pm.environment.get(\"hardwareControllerName\"));\r",
													"})\r",
													"\r",
													"pm.test(\"hardware should have 0 elements\", () => {\r",
													"    pm.expect(responseJson.hardware).to.have.lengthOf(0);\r",
													"})\r",
													"\r",
													"pm.test(\"sensors should have 0 elements\", () => {\r",
													"    pm.expect(responseJson.sensors).to.have.lengthOf(0);\r",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid')\r",
													"\r",
													"pm.environment.set(\"hardwareSerialNumber\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\":\"{{hardwareControllerName}}\",\r\n    \"serialNumber\":\"{{hardwareSerialNumber}}\",\r\n    \"hardware\":[]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardwarecontroller/",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardwarecontroller",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "update hardware controller",
							"item": [
								{
									"name": "Add hardward controller",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid')\r",
													"\r",
													"pm.environment.set(\"hardwareSerialNumber\", uuid.v4());\r",
													"pm.environment.set(\"hardwareControllerName\", \"updated name\");\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"pm.environment.set(\"hardwareControllerId\", responseJson.id);\r",
													"\r",
													"pm.test(\"Hardware serial number should be equal to hardware serial number\", () => {\r",
													"    pm.expect(responseJson.serialNumber).to.equal(pm.environment.get(\"hardwareSerialNumber\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Hardware name should be equal to passed name\", () => {\r",
													"    pm.expect(responseJson.name).to.equal(pm.environment.get(\"hardwareControllerName\"));\r",
													"})\r",
													"\r",
													"pm.test(\"hardware should have 0 elements\", () => {\r",
													"    pm.expect(responseJson.hardware).to.have.lengthOf(0);\r",
													"})\r",
													"\r",
													"pm.test(\"sensors should have 0 elements\", () => {\r",
													"    pm.expect(responseJson.sensors).to.have.lengthOf(0);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\":\"{{hardwareControllerName}}\",\r\n    \"serialNumber\":\"{{hardwareSerialNumber}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardwarecontroller/",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardwarecontroller",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update hardware controller",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid')\r",
													"\r",
													"pm.environment.set(\"updatedHardwareName\", \"updated hardware name 4\");\r",
													"pm.environment.set(\"updatedSerialNumber\", uuid.v4());\r",
													"pm.environment.set(\"hardwareControllerName\", \"first name\");\r",
													"\r",
													"var responseJson = pm.environment.get(\"responseJson\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Hardware serial number should be equal to hardware serial number\", () => {\r",
													"    pm.expect(responseJson.serialNumber).to.equal(pm.environment.get(\"updatedSerialNumber\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Hardware name should be equal to passed name\", () => {\r",
													"    pm.expect(responseJson.name).to.equal(pm.environment.get(\"updatedHardwareName\"));\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\":{{hardwareControllerId}},\r\n    \"name\":\"{{updatedHardwareName}}\",\r\n    \"serialNumber\":\"{{updatedSerialNumber}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardwarecontroller/{{hardwareControllerId}}",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardwarecontroller",
												"{{hardwareControllerId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "delete hardware controller",
							"item": [
								{
									"name": "Add hardward controller",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid')\r",
													"\r",
													"pm.environment.set(\"hardwareSerialNumber\", uuid.v4());\r",
													"pm.environment.set(\"hardwareControllerName\", \"first name\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"hardwareControllerId\", responseJson.id);\r",
													"\r",
													"pm.test(\"Hardware serial number should be equal to hardware serial number\", () => {\r",
													"    pm.expect(responseJson.serialNumber).to.equal(pm.environment.get(\"hardwareSerialNumber\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Hardware name should be equal to passed name\", () => {\r",
													"    pm.expect(responseJson.name).to.equal(pm.environment.get(\"hardwareControllerName\"));\r",
													"})\r",
													"\r",
													"pm.test(\"hardware should have 0 elements\", () => {\r",
													"    pm.expect(responseJson.hardware).to.have.lengthOf(0);\r",
													"})\r",
													"\r",
													"pm.test(\"sensors should have 0 elements\", () => {\r",
													"    pm.expect(responseJson.sensors).to.have.lengthOf(0);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\":\"{{hardwareControllerName}}\",\r\n    \"serialNumber\":\"{{hardwareSerialNumber}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardwarecontroller/",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardwarecontroller",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete hardware controller",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status should be 204\", () => {\r",
													"    pm.response.to.have.status(204);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardwarecontroller/{{hardwareControllerId}}",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardwarecontroller",
												"{{hardwareControllerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "verify hardware controller deleted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response code should be 404\", () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardwarecontroller/{{hardwareControllerId}}",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardwarecontroller",
												"{{hardwareControllerId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Hardware controller not found",
							"item": [
								{
									"name": "Hardware controller not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"hardwareId\", _.random(100, 500));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var response = pm.response\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"var expectedMessage = \"Hardware Controller not found with id of \" + pm.environment.get(\"hardwareId\");\r",
													"var expectedHttpStatus = 404;\r",
													"\r",
													"pm.test(\"Status should be 404\", () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Message should be set correctly\", () => {\r",
													"    pm.expect(responseBody.message).eq(expectedMessage);\r",
													"});\r",
													"\r",
													"pm.test(\"httpStatus should be set to 404\", () => {\r",
													"    pm.expect(responseBody.httpStatus).eq(pm.environment.get(\"expectedHttpStatus\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardwarecontroller/{{hardwareId}}",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardwarecontroller",
												"{{hardwareId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "hardware",
					"item": [
						{
							"name": "Add hardware",
							"item": [
								{
									"name": "create hardware controller",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid')\r",
													"\r",
													"pm.environment.set(\"hardwareSerialNumber\", uuid.v4());\r",
													"pm.environment.set(\"hardwareControllerName\", \"first name\");\r",
													"pm.environment.set(\"hardwareName\", \"first hardware\");\r",
													"pm.environment.set(\"hardwareCategory\", \"LIGHT\");\r",
													"pm.environment.set(\"port\", 1);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"var hardware = responseJson.hardware[0];\r",
													"\r",
													"pm.test(\"hardware should have 0 elements\", () => {\r",
													"    pm.expect(responseJson.hardware).to.have.lengthOf(0);\r",
													"})\r",
													"\r",
													"pm.environment.set(\"hardwareControllerId\", responseJson.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{hardwareControllerName}}\",\r\n    \"serialNumber\": \"{{hardwareSerialNumber}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardwarecontroller/",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardwarecontroller",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "add hardware",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid')\r",
													"\r",
													"pm.environment.set(\"hardwareSerialNumber\", uuid.v4());\r",
													"pm.environment.set(\"hardwareControllerName\", \"first name\");\r",
													"pm.environment.set(\"secondHardwareName\", \"second hardware\");\r",
													"pm.environment.set(\"secondHardwareCategory\", \"HEATER\");\r",
													"pm.environment.set(\"secondHardwarePort\", 2);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var hardware = pm.response.json();\r",
													"var newHardwareId = hardware.id;\r",
													"\r",
													"\r",
													"pm.test(\"status should be 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"})\r",
													"\r",
													"pm.test(\"Hardware name should be set correctly\", () => {\r",
													"    pm.expect(hardware.name).to.equal(pm.environment.get(\"secondHardwareName\"));\r",
													"})\r",
													"\r",
													"pm.test(\"Hardware port should be set correctly\", () => {\r",
													"    pm.expect(hardware.port).to.equal(pm.environment.get(\"secondHardwarePort\"));\r",
													"})\r",
													"\r",
													"pm.test(\"Hardware category should be set correctly\", () => {\r",
													"    pm.expect(hardware.type).to.equal(pm.environment.get(\"secondHardwareCategory\"));\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{secondHardwareName}}\",\r\n    \"type\": \"{{secondHardwareCategory}}\",\r\n    \"port\": {{secondHardwarePort}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardwarecontroller/{{hardwareControllerId}}/hardware",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardwarecontroller",
												"{{hardwareControllerId}}",
												"hardware"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete hardware",
							"item": [
								{
									"name": "Add hardward controller with single hardware",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid')\r",
													"\r",
													"pm.environment.set(\"hardwareSerialNumber\", uuid.v4());\r",
													"pm.environment.set(\"hardwareControllerName\", \"first name\");\r",
													"pm.environment.set(\"hardwareName\", \"first hardware\");\r",
													"pm.environment.set(\"hardwareType\", \"LIGHT\");\r",
													"pm.environment.set(\"port\", 1);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"pm.environment.set(\"hardwareControllerId\", responseJson.id);\r",
													"pm.environment.set(\"hardwareId\", responseJson.hardware[0].id);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{hardwareControllerName}}\",\r\n    \"serialNumber\": \"{{hardwareSerialNumber}}\",\r\n    \"hardware\": [\r\n        {\r\n            \"name\": \"{{hardwareName}}\",\r\n            \"type\": \"{{hardwareType}}\",\r\n            \"port\": {{port}}\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardwarecontroller/",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardwarecontroller",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete hardware",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be 204\", () => {\r",
													"    pm.response.to.have.status(204);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardware/{{hardwareId}}",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardware",
												"{{hardwareId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get deleted hardware",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status should be 404\", () => {\r",
													"    pm.response.to.have.status(404);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardware/{{hardwareId}}",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardware",
												"{{hardwareId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "update hardware",
							"item": [
								{
									"name": "Create hardware controller with single hardware",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid')\r",
													"\r",
													"pm.environment.set(\"serialNumber\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"pm.environment.set(\"hardwareId\", responseJson.hardware[0].id);\r",
													"pm.environment.set(\"hardwareControllerId\", responseJson.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\":\"first name\",\r\n    \"serialNumber\":\"{{serialNumber}}\",\r\n    \"hardware\":[\r\n        {\r\n            \"name\":\"first hardware\",\r\n            \"type\":\"LIGHT\",\r\n            \"port\":0,\r\n            \"serialNumber\":\"1234\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardwarecontroller/",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardwarecontroller",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update hardware name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"hardwareName\", \"second name\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var hardware = pm.response.json();\r",
													"\r",
													"pm.test(\"The hardware controller id should be same\", () => {\r",
													"    pm.expect(hardware.hardwareControllerId).to.equal(pm.environment.get(\"hardwareControllerId\"));\r",
													"})\r",
													"\r",
													"\r",
													"pm.test(\"The hardware name should now be 'second name'\", () => {\r",
													"    pm.expect(hardware.name).to.equal(pm.environment.get(\"hardwareName\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"port\": {{port}},\r\n    \"name\": \"{{hardwareName}}\",\r\n    \"type\": \"LIGHT\",\r\n    \"desiredState\": {\r\n        \"level\": 0,\r\n        \"state\": \"OFF\"\r\n    },\r\n    \"currentState\": {\r\n        \"level\": 0,\r\n        \"state\": \"OFF\"\r\n    },\r\n    \"hardwareControllerId\": {{hardwareControllerId}},\r\n    \"timers\": [],\r\n    \"metadata\": {}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardware/{{hardwareId}}",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardware",
												"{{hardwareId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update hardware type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"hardwareType\", \"HEATER\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var hardware = pm.response.json()\r",
													"\r",
													"pm.test(\"The hardware type should now be 'heater'\", () => {\r",
													"    pm.expect(hardware.type).to.equal(pm.environment.get(\"hardwareType\"));\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"port\": {{port}},\r\n    \"name\": \"{{hardwareName}}\",\r\n    \"type\": \"{{hardwareType}}\",\r\n    \"desiredState\": {\r\n        \"level\": 0,\r\n        \"state\": \"OFF\"\r\n    },\r\n    \"currentState\": {\r\n        \"level\": 0,\r\n        \"state\": \"OFF\"\r\n    },\r\n    \"hardwareControllerId\": {{hardwareControllerId}},\r\n    \"timers\": [],\r\n    \"metadata\": {}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardware/{{hardwareId}}",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardware",
												"{{hardwareId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update hardware port",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"port\", 1);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var hardware = pm.response.json()\r",
													"\r",
													"pm.test(\"The hardware port should now be '1'\", () => {\r",
													"    pm.expect(hardware.port).to.equal(pm.environment.get(\"port\"));\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"port\": {{port}},\r\n    \"name\": \"{{hardwareName}}\",\r\n    \"type\": \"{{hardwareType}}\",\r\n    \"desiredState\": {\r\n        \"level\": 0,\r\n        \"state\": \"OFF\"\r\n    },\r\n    \"currentState\": {\r\n        \"level\": 0,\r\n        \"state\": \"OFF\"\r\n    },\r\n    \"hardwareControllerId\": {{hardwareControllerId}},\r\n    \"timers\": [],\r\n    \"metadata\": {}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardware/{{hardwareId}}",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardware",
												"{{hardwareId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update desired state",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"desiredState\", \"ON\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var hardware = pm.response.json()\r",
													"\r",
													"pm.test(\"The hardware port should now be '1'\", () => {\r",
													"    pm.expect(hardware.port).to.equal(pm.environment.get(\"port\"));\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"port\": {{port}},\r\n    \"name\": \"{{hardwareName}}\",\r\n    \"type\": \"{{hardwareType}}\",\r\n    \"desiredState\": {\r\n        \"level\": 0,\r\n        \"state\": \"{{desiredState}}\"\r\n    },\r\n    \"currentState\": {\r\n        \"level\": 0,\r\n        \"state\": \"OFF\"\r\n    },\r\n    \"hardwareControllerId\": {{hardwareControllerId}},\r\n    \"timers\": [],\r\n    \"metadata\": {}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardware/{{hardwareId}}",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardware",
												"{{hardwareId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check hardware on controller",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"var hardwareController = responseJson;\r",
													"var hardware = hardwareController.hardware[0];\r",
													"\r",
													"pm.test(\"The hardware controller id should be same\", () => {\r",
													"    pm.expect(hardwareController.id).to.equal(pm.environment.get(\"hardwareControllerId\"));\r",
													"})\r",
													"\r",
													"pm.test(\"There should only be 1 hardware\", () => {\r",
													"    pm.expect(responseJson.hardware).to.have.lengthOf(1)\r",
													"});\r",
													"\r",
													"pm.test(\"The hardware name should now be 'second name'\", () => {\r",
													"    pm.expect(hardware.name).to.equal(pm.environment.get(\"hardwareName\"));\r",
													"});\r",
													"\r",
													"pm.test(\"The hardware type should now be 'heater'\", () => {\r",
													"    pm.expect(responseJson.hardware[0].type).to.equal(pm.environment.get(\"hardwareType\"));\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardwarecontroller/{{hardwareControllerId}}",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardwarecontroller",
												"{{hardwareControllerId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Add hardware in controller",
							"item": []
						},
						{
							"name": "Hardware not found",
							"item": [
								{
									"name": "Hardware controller not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"hardwareId\", _.random(400, 500));\r",
													"pm.environment.set(\"expectedMessage\", \"Hardware not found with id of \" + pm.environment.get(\"hardwareId\"));\r",
													"pm.environment.set(\"expectedHttpStatus\", 404);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var response = pm.response\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status should be 404\", () => {\r",
													"    pm.expect(response.code).to.eq(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Message should be set correctly\", () => {\r",
													"    pm.expect(responseBody.message).eq(pm.environment.get(\"expectedMessage\"));\r",
													"});\r",
													"\r",
													"pm.test(\"httpStatus should be set to 404\", () => {\r",
													"    pm.expect(responseBody.httpStatus).eq(pm.environment.get(\"expectedHttpStatus\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardware/{{hardwareId}}",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardware",
												"{{hardwareId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "sensor",
					"item": [
						{
							"name": "Delete sensor",
							"item": [
								{
									"name": "Add hardward controller with single sensor",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid')\r",
													"\r",
													"pm.environment.set(\"hardwareSerialNumber\", uuid.v4());\r",
													"pm.environment.set(\"hardwareControllerName\", \"hardware controller\");\r",
													"pm.environment.set(\"sensorName\", \"first sensor\");\r",
													"pm.environment.set(\"sensorType\", \"TEMPERATURE\");\r",
													"pm.environment.set(\"port\", 1);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"pm.environment.set(\"sensorId\", responseJson.sensors[0].id);\r",
													"pm.environment.set(\"hardwareControllerId\", responseJson.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\":\"{{hardwareControllerName}}\",\r\n    \"serialNumber\":\"{{hardwareSerialNumber}}\",\r\n    \"sensors\":[\r\n        {\r\n            \"name\":\"{{sensorName}}\",\r\n            \"sensorType\":\"{{sensorType}}\",\r\n            \"port\":{{port}}\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardwarecontroller/",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardwarecontroller",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete sensor",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status should be 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/sensor/{{sensorId}}",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"sensor",
												"{{sensorId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check deleted sensor is not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"responseJson = pm.response.json();\r",
													"var sensors = responseJson.sensors;\r",
													"\r",
													"pm.test(\"Result status should be 404\", () => {\r",
													"    pm.expect(pm.response.to.have.status(404));\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/sensor/{{sensorId}}",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"sensor",
												"{{sensorId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Add sensor",
							"item": [
								{
									"name": "create hardware controller",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid')\r",
													"\r",
													"pm.environment.set(\"hardwareSerialNumber\", uuid.v4());\r",
													"pm.environment.set(\"hardwareControllerName\", \"hardware controller\");\r",
													"pm.environment.set(\"sensorName\", \"first sensor\");\r",
													"pm.environment.set(\"sensorType\", \"TEMPERATURE\");\r",
													"pm.environment.set(\"port\", 1);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"pm.environment.set(\"hardwareControllerId\", responseJson.id);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\":\"{{hardwareControllerName}}\",\r\n    \"serialNumber\":\"{{hardwareSerialNumber}}\",\r\n    \"sensors\":[\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardwarecontroller/",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardwarecontroller",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "add sensor",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"pm.environment.set(\"secondSensorName\", \"second sensor\");\r",
													"pm.environment.set(\"secondSensorType\", \"HUMIDITY\");\r",
													"pm.environment.set(\"secondSensorPort\", 2);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var sensor = pm.response.json();\r",
													"\r",
													"pm.test(\"Sensor name should be set correctly\", () => {\r",
													"    pm.expect(sensor.name).to.equal(pm.environment.get(\"secondSensorName\"));\r",
													"})\r",
													"\r",
													"pm.test(\"Sensor port should be set correctly\", () => {\r",
													"    pm.expect(sensor.port).to.equal(pm.environment.get(\"secondSensorPort\"));\r",
													"})\r",
													"\r",
													"pm.test(\"Sensor category should be set correctly\", () => {\r",
													"    pm.expect(sensor.sensorType).to.equal(pm.environment.get(\"secondSensorType\"));\r",
													"})\r",
													"\r",
													"pm.test(\"Sensor hardware controller id should be set to parent hardware controller id\", () => {\r",
													"    pm.expect(sensor.hardwareControllerId).to.equal(pm.environment.get(\"hardwareControllerId\"));\r",
													"})\r",
													"\r",
													"pm.environment.set(\"newSensorId\", sensor.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{secondSensorName}}\",\r\n    \"sensorType\": \"{{secondSensorType}}\",\r\n    \"port\": {{secondSensorPort}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardwarecontroller/{{hardwareControllerId}}/sensor",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardwarecontroller",
												"{{hardwareControllerId}}",
												"sensor"
											]
										}
									},
									"response": []
								},
								{
									"name": "check sensor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"responseJson = pm.response.json();\r",
													"sensor = responseJson\r",
													"\r",
													"pm.test(\"new sensor should exist\", () => {\r",
													"    pm.expect(sensor).to.exist;\r",
													"})\r",
													"\r",
													"pm.test(\"new sensor should have port set\", () => {\r",
													"    pm.expect(sensor.port).to.eq(pm.environment.get(\"secondSensorPort\"));\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/sensor/{{newSensorId}}",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"sensor",
												"{{newSensorId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check sensor on controller",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"responseJson = pm.response.json();\r",
													"sensors = responseJson.sensors;\r",
													"\r",
													"pm.test(\"there should be 2 sensors\", () => {\r",
													"    pm.expect(sensors).to.have.lengthOf(1);\r",
													"})\r",
													"\r",
													"var sensor = sensors.filter((sensor) => {\r",
													"    return sensor.id == pm.environment.get(\"newSensorId\");\r",
													"})[0];\r",
													"\r",
													"pm.test(\"new sensor should exist\", () => {\r",
													"    pm.expect(sensor).to.exist;\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardwarecontroller/{{hardwareControllerId}}",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardwarecontroller",
												"{{hardwareControllerId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "update sensor",
							"item": [
								{
									"name": "Create hardware controller with single sensor",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid')\r",
													"\r",
													"pm.environment.set(\"serialNumber\", uuid.v4());\r",
													"pm.environment.set(\"sensorName\", \"first sensor\");\r",
													"pm.environment.set(\"sensorType\",\"TEMPERATURE\");\r",
													"pm.environment.set(\"sensorPort\", 0);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"pm.environment.set(\"sensor\", responseJson.sensors[0]);\r",
													"pm.environment.set(\"sensorId\", responseJson.sensors[0].id);\r",
													"pm.environment.set(\"hardwareControllerId\", responseJson.id);\r",
													"pm.test(\"there should be exactly 1 sensor\", () => {\r",
													"    pm.expect(responseJson.sensors).to.have.lengthOf(1)\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\":\"first name\",\r\n    \"serialNumber\":\"{{serialNumber}}\",\r\n    \"sensors\":[\r\n        {\r\n            \"name\":\"{{sensorName}}\",\r\n            \"sensorType\":\"{{sensorType}}\",\r\n            \"port\":{{sensorPort}}\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardwarecontroller/",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardwarecontroller",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update sensor port",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"hardwareName\", \"second name\");\r",
													"pm.environment.set(\"updatedSensorPort\", 1);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var sensor = pm.response.json();\r",
													"\r",
													"pm.test(\"the sensor port number should be updated\", () =>{\r",
													"    pm.expect(sensor.port).to.equal(pm.environment.get(\"updatedSensorPort\"));\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n        {\r\n            \"id\": {{sensorId}},\r\n            \"name\":\"{{sensorName}}\",\r\n            \"sensorType\": \"{{sensorType}}\",\r\n            \"port\": {{updatedSensorPort}},\r\n            \"hardwareControllerId\": {{hardwareControllerId}}\r\n        }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/sensor/{{sensorId}}",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"sensor",
												"{{sensorId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update sensor type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"hardwareName\", \"second name\");\r",
													"pm.environment.set(\"updatedSensorType\", \"HUMIDITY\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var sensor = pm.response.json();\r",
													"\r",
													"pm.test(\"the sensor type should be updated\", () =>{\r",
													"    pm.expect(sensor.sensorType).to.equal(pm.environment.get(\"updatedSensorType\"));\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n        {\r\n            \"name\":\"{{sensorName}}\",\r\n            \"sensorType\": \"{{updatedSensorType}}\",\r\n            \"port\": {{updatedSensorPort}},\r\n            \"hardwareControllerId\": {{hardwareControllerId}}\r\n        }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/sensor/{{sensorId}}",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"sensor",
												"{{sensorId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "read sensor",
							"item": [
								{
									"name": "Add hardware controller with single sensor",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid')\r",
													"\r",
													"pm.environment.set(\"hardwareSerialNumber\", \"!234\");\r",
													"pm.environment.set(\"hardwareControllerName\", \"hardware controller\");\r",
													"pm.environment.set(\"sensorName\", \"first sensor\");\r",
													"pm.environment.set(\"sensorType\", \"TEMPERATURE\");\r",
													"pm.environment.set(\"port\", 1);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var sensor = pm.response.json().sensors[0]\r",
													"pm.environment.set(\"sensorId\", sensor.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\":\"{{hardwareControllerName}}\",\r\n    \"serialNumber\":\"{{hardwareSerialNumber}}\",\r\n    \"sensors\":[\r\n        {\r\n            \"name\":\"{{sensorName}}\",\r\n            \"sensorType\":\"{{sensorType}}\",\r\n            \"port\":{{port}}\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardwarecontroller/",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardwarecontroller",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "read second sensor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"responseJson = pm.response.json();\r",
													"sensors = responseJson.sensors;\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/sensor/{{sensorId}}/reading",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"sensor",
												"{{sensorId}}",
												"reading"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Sensor not found",
							"item": [
								{
									"name": "Sensor not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"sensorId\", _.random(100, 500));\r",
													"pm.environment.set(\"expectedMessage\", \"Sensor not found with id of \" + pm.environment.get(\"sensorId\"));\r",
													"pm.environment.set(\"expectedHttpStatus\", 404);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var response = pm.response\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status should be 404\", () => {\r",
													"    pm.expect(response.code).to.eq(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Message should be set correctly\", () => {\r",
													"    pm.expect(responseBody.message).eq(pm.environment.get(\"expectedMessage\"));\r",
													"});\r",
													"\r",
													"pm.test(\"httpStatus should be set to 404\", () => {\r",
													"    pm.expect(responseBody.httpStatus).eq(pm.environment.get(\"expectedHttpStatus\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/sensor/{{sensorId}}",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"sensor",
												"{{sensorId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "timer",
					"item": [
						{
							"name": "Add hardware timer on controller creation",
							"item": [
								{
									"name": "Add hardward controller with single hardware",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid')\r",
													"\r",
													"pm.environment.set(\"hardwareSerialNumber\", uuid.v4());\r",
													"pm.environment.set(\"hardwareControllerName\", \"first name\");\r",
													"pm.environment.set(\"hardwareName\", \"first hardware\");\r",
													"pm.environment.set(\"hardwareType\", \"LIGHT\");\r",
													"pm.environment.set(\"port\", 1);\r",
													"pm.environment.set(\"onCronString\", \"0/1 * * * * ? *\");\r",
													"pm.environment.set(\"offCronString\", \"0/2 * * * * ? *\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var hardware = pm.response.json().hardware[0];\r",
													"pm.environment.set(\"hardwareId\", hardware.id);\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{hardwareControllerName}}\",\r\n    \"serialNumber\": \"{{hardwareSerialNumber}}\",\r\n    \"hardware\": [\r\n        {\r\n            \"name\": \"{{hardwareName}}\",\r\n            \"type\": \"{{hardwareType}}\",\r\n            \"port\": {{port}}\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardwarecontroller/",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardwarecontroller",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Add timer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timer = pm.environment.get(\"addedTimer\");\r",
													"\r",
													"pm.test(\"Timer hardwareId should be set correctly\", () => {\r",
													"    pm.expect(timer.hardwareId).equals(pm.environment.get(\"hardware\").id);\r",
													"})\r",
													"\r",
													"pm.test(\"Timer onCronString should be set correctly\", () => {\r",
													"    pm.expect(timer.onCronString).equals(pm.environment.get(\"onCronString\"));\r",
													"})\r",
													"\r",
													"pm.test(\"Timer offCronString should be set correctly\", () => {\r",
													"    pm.expect(timer.offCronString).equals(pm.environment.get(\"offCronString\"));\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"onLevel\": 5,\r\n    \"onCronString\": \"{{onCronString}}\",\r\n    \"offCronString\": \"{{offCronString}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardware/{{hardwareId}}/timer",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardware",
												"{{hardwareId}}",
												"timer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get hardware and check timers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"hardware = pm.response.json()\r",
													"timers = hardware.timers\r",
													"pm.test(\"The hardware should have a single timer\", () => {\r",
													"    pm.expect(timers).to.have.length(1);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardware/{{hardwareId}}",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardware",
												"{{hardwareId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete hardware timer",
							"item": [
								{
									"name": "Add hardward controller with single hardware",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid')\r",
													"\r",
													"pm.environment.set(\"hardwareSerialNumber\", uuid.v4());\r",
													"pm.environment.set(\"hardwareControllerName\", \"first name\");\r",
													"pm.environment.set(\"hardwareName\", \"first hardware\");\r",
													"pm.environment.set(\"hardwareCategory\", \"LIGHT\");\r",
													"pm.environment.set(\"port\", 1);\r",
													"pm.environment.set(\"onCronString\", \"0/1 * * * * ? *\");\r",
													"pm.environment.set(\"offCronString\", \"0/2 * * * * ? *\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"pm.environment.set(\"hardwareControllerId\", responseJson.id);\r",
													"var hardware = responseJson.hardware[0];\r",
													"pm.environment.set(\"hardwareId\", hardware.id);\r",
													"var timer = hardware.timers[0];\r",
													"pm.environment.set(\"addedTimerId\", timer.id);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{hardwareControllerName}}\",\r\n    \"serialNumber\": \"{{hardwareSerialNumber}}\",\r\n    \"hardware\": [\r\n        {\r\n            \"name\": \"{{hardwareName}}\",\r\n            \"hardwareCategory\": \"{{hardwareCategory}}\",\r\n            \"port\": {{port}},\r\n            \"timers\":[\r\n                {\r\n                    \"onLevel\":5,\r\n                    \"onCronString\":\"{{onCronString}}\",\r\n                    \"offCronString\":\"{{offCronString}}\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardwarecontroller/",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardwarecontroller",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete timer",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/timer/{{addedTimerId}}",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"timer",
												"{{addedTimerId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "scheduled sensor reading",
					"item": [
						{
							"name": "Add scheduled sensor reading",
							"item": [
								{
									"name": "Add hardware controller with single sensor",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid')\r",
													"\r",
													"pm.environment.set(\"hardwareSerialNumber\", \"1234\");\r",
													"pm.environment.set(\"hardwareControllerName\", \"hardware controller\");\r",
													"pm.environment.set(\"sensorName\", \"first sensor\");\r",
													"pm.environment.set(\"sensorType\", \"TEMPERATURE\");\r",
													"pm.environment.set(\"port\", 1);\r",
													"pm.environment.set(\"scheduledReadingCronString\", \"0/1 * * * * ? *\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"scheduledReadingCronString\", \"0/10 * * ? * * *\");\r",
													"var responseJson = pm.response.json();\r",
													"var sensor = responseJson.sensors[0];\r",
													"pm.environment.set(\"sensorId\", sensor.id);\r",
													"pm.environment.set(\"hardwareControllerId\", responseJson.id);\r",
													"\r",
													"var sensors = responseJson.sensors;\r",
													"var scheduledReadings = sensors[0].scheduledSensorReadings;\r",
													"\r",
													"pm.test(\"There should be 1 scheduled reading\", () => {\r",
													"    pm.expect(scheduledReadings).has.lengthOf(1);\r",
													"})\r",
													"\r",
													"var scheudledReading = scheduledReadings[0];\r",
													"\r",
													"pm.test(\"The scheduled reading should have the correct cron string\", () => {\r",
													"    pm.expect(scheudledReading.cronString).to.equal(pm.environment.get(\"scheduledReadingCronString\"));\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{hardwareControllerName}}\",\r\n    \"serialNumber\": \"{{hardwareSerialNumber}}\",\r\n    \"sensors\": [\r\n        {\r\n            \"name\": \"{{sensorName}}\",\r\n            \"sensorType\": \"{{sensorType}}\",\r\n            \"port\": {{port}},\r\n            \"scheduledSensorReadings\": [\r\n                {\r\n                    \"cronString\": \"{{scheduledReadingCronString}}\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardwarecontroller/",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardwarecontroller",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Add scheduled sensor reading",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid')\r",
													"\r",
													"pm.environment.set(\"hardwareSerialNumber\", uuid.v4());\r",
													"pm.environment.set(\"hardwareControllerName\", \"hardware controller\");\r",
													"pm.environment.set(\"sensorName\", \"first sensor\");\r",
													"pm.environment.set(\"sensorType\", \"TEMPERATURE\");\r",
													"pm.environment.set(\"port\", 1);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"pm.test(\"Response should have the correct cron string\", () => {\r",
													"    pm.expect(jsonResponse.cronString).to.equal(pm.environment.get(\"scheduledReadingCronString\"));\r",
													"})\r",
													"\r",
													"pm.test(\"Response should have the correct sensor id\", () => {\r",
													"    pm.expect(jsonResponse.sensorId).to.equal(pm.environment.get(\"sensorId\"));\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cronString\": \"0/10 * * ? * * *\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/sensor/{{sensorId}}/scheduledReading/",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"sensor",
												"{{sensorId}}",
												"scheduledReading",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Check sensor has the correct number of scheduled sensor readings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var sensor = pm.response.json();\r",
													"\r",
													"pm.test(\"Sensor should have 2 scheduled readings\", () => {\r",
													"    pm.expect(sensor.scheduledSensorReadings).to.have.length(2);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/sensor/{{sensorId}}",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"sensor",
												"{{sensorId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get sensor readings",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/sensor/{{sensorId}}/readings/?startDate=2023-06-11T18-03-00&endDate=2023-06-12T18-01-00",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"sensor",
												"{{sensorId}}",
												"readings",
												""
											],
											"query": [
												{
													"key": "startDate",
													"value": "2023-06-11T18-03-00"
												},
												{
													"key": "endDate",
													"value": "2023-06-12T18-01-00"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete scheduled sensor reading",
							"item": [
								{
									"name": "Add hardware controller with single sensor",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid')\r",
													"\r",
													"pm.environment.set(\"hardwareSerialNumber\", uuid.v4());\r",
													"pm.environment.set(\"hardwareControllerName\", \"hardware controller\");\r",
													"pm.environment.set(\"sensorName\", \"first sensor\");\r",
													"pm.environment.set(\"sensorType\", \"TEMPERATURE\");\r",
													"pm.environment.set(\"port\", 1);\r",
													"pm.environment.set(\"scheduledReadingCronString\", \"0/1 * * * * ? *\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"scheduledReadingCronString\", \"0/10 * * ? * * *\");\r",
													"var responseJson = pm.response.json();\r",
													"var sensor = responseJson.sensors[0];\r",
													"pm.environment.set(\"sensorId\", sensor.id);\r",
													"pm.environment.set(\"hardwareControllerId\", responseJson.id);\r",
													"\r",
													"var sensors = responseJson.sensors;\r",
													"var scheduledReadings = sensors[0].scheduledSensorReadings;\r",
													"\r",
													"pm.test(\"There should be 1 scheduled reading\", () => {\r",
													"    pm.expect(scheduledReadings).has.lengthOf(1);\r",
													"})\r",
													"\r",
													"pm.environment.set(\"scheduledReading\", scheduledReadings[0]);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{hardwareControllerName}}\",\r\n    \"serialNumber\": \"{{hardwareSerialNumber}}\",\r\n    \"sensors\": [\r\n        {\r\n            \"name\": \"{{sensorName}}\",\r\n            \"sensorType\": \"{{sensorType}}\",\r\n            \"port\": {{port}},\r\n            \"scheduledSensorReadings\": [\r\n                {\r\n                    \"cronString\": \"{{scheduledReadingCronString}}\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardwarecontroller/",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardwarecontroller",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Check sensor has the correct number of scheduled sensor readings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var scheduledReadingId = pm.environment.get(\"scheudledReading\").id;\r",
													"pm.environment.set(\"scheduledReadingId\", scheduledReadingId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{hardwareHost}}:{{hardwarePort}}/hardwarecontroller/{{hardwareControllerId}}/sensor/{{sensorId}}/scheduledReading/{{scheduledReadingId}}",
											"host": [
												"{{hardwareHost}}"
											],
											"port": "{{hardwarePort}}",
											"path": [
												"hardwarecontroller",
												"{{hardwareControllerId}}",
												"sensor",
												"{{sensorId}}",
												"scheduledReading",
												"{{scheduledReadingId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	]
}