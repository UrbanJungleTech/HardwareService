


### Create a sensor on port 12

POST http://4.156.161.23:8081/hardwarecontroller/{{hardwareControllerId}}/sensor HTTP/1.1
Content-Type: application/json
Accept: application/json

{
  "name": "left side temperature sensor",
  "port": "23",
  "configuration":{
        "sensor_type": "18B20"
  }
}

> {%
 client.global.set("leftTemperatureSensorId", response.body.id);
 %}


### Create a sensor on port 13
POST http://4.156.161.23:8081/hardwarecontroller/{{hardwareControllerId}}/sensor HTTP/1.1
Content-Type: application/json
Accept: application/json

{
  "name": "center temperature sensor",
  "port": "13",
  "configuration":{
        "sensor_type": "18B20"
  }
}

> {%
 client.global.set("centerTemperatureSensorId", response.body.id);
 %}

### Create a sensor on port 14
POST http://4.156.161.23:8081/hardwarecontroller/{{hardwareControllerId}}/sensor HTTP/1.1
Content-Type: application/json
Accept: application/json

{
  "name": "right temperature sensor",
  "port": "14",
  "configuration":{
        "sensor_type": "18B20"
  }
}

> {%
 client.global.set("rightTemperatureSensorId", response.body.id);
 %}


### Read the sensor value
GET http://4.156.161.23:8081/sensor/{{leftTemperatureSensorId}}/reading HTTP/1.1
Content-Type: application/json
Accept: application/json


### create a fan on port 25
POST http://4.156.161.23:8081/hardwarecontroller/{{hardwareControllerId}}/hardware HTTP/1.1
Content-Type: application/json
Accept: application/json

{
  "name": "left side fan",
  "port": "25",
  "possibleStates": [
    "ON",
    "OFF"
  ],
  "offState": "OFF"
}

> {%
 client.global.set("leftFanId", response.body.id);
 %}

### create a fan on port 26
POST http://4.156.161.23:8081/hardwarecontroller/{{hardwareControllerId}}/hardware HTTP/1.1
Content-Type: application/json
Accept: application/json

{
  "name": "center fan",
  "port": "26"
}

> {%
 client.global.set("centerFanId", response.body.id);
 %}



### Create a scheduled reading for the left temperature sensor to read every 1 second
POST http://4.156.161.23:8081/sensor/{{leftTemperatureSensorId}}/scheduledreading HTTP/1.1
Content-Type: application/json
Accept: application/json

{
  "name": "left temperature sensor reading",
  "cronString": "0/1 * * * * ?",
  "sensorId": "{{leftTemperatureSensorId}}"
}

###Get all of the readings using startDate = 5 minutes ago and endDate = now using date format yyyy-MM-dd'T'HH:mm:ss
GET http://4.156.161.23:8081/sensor/{{leftTemperatureSensorId}}/readings?startDate=2023-12-18T00:00:00&endDate=2023-12-19T00:05:00 HTTP/1.1
Content-Type: application/json
Accept: application/json

### Update the fan on port 25 to be on
PUT http://4.156.161.23:8081/hardware/{{leftFanId}} HTTP/1.1
Content-Type: application/json
Accept: application/json

{
  "name": "left side fan",
  "port": "4",
  "desiredState": {
    "state": "ON",
    "level": "100"
  },
  "possibleStates": [
    "ON",
    "OFF"
  ],
  "offState": "OFF"
}

### Update the right fan to be on
PUT http://4.156.161.23:8081/hardware/{{rightFanId}} HTTP/1.1
Content-Type: application/json
Accept: application/json

{
  "name": "right fan",
  "port": "4",
  "desiredState": {
    "state": "ON",
    "level": "100"
  },
  "possibleStates": [
    "ON",
    "OFF"
  ],
  "offState": "OFF"
}




### Create a hardware controller and retrieve the id
POST http://4.156.161.23:8081/hardwarecontroller/ HTTP/1.1
Accept: application/json
Content-Type: application/json

{
  "name": "garden 1",
  "description": "garden 1",
  "type": "urbanjungletech.hardwareservice.model.hardwarecontroller.MqttHardwareController",
  "brokerUrl": "tcp://hardware-mqtt:1883",
  "requestTopic": "12356ToMicro",
  "responseTopic": "HardwareServer"
}

> {%
    client.test("Status code is 201", function() {
        client.assert(response.status === 201, "Response status is not 201")
    });
    client.global.set("hardwareControllerId", response.body.id);
%}


### create a fan on port 27
POST http://4.156.161.23:8081/hardwarecontroller/{{hardwareControllerId}}/hardware HTTP/1.1
Content-Type: application/json
Accept: application/json

{
  "name": "right fan",
  "port": "22",
  "desiredState": {
    "state": "ON",
    "level": "100"
  },
  "possibleStates": [
    "ON",
    "OFF"
  ],
  "configuration": {
    "levelable": true
  },
  "offState": "OFF"
}

> {%
    client.global.set("rightFanId", response.body.id);
%}


### Update the fan on port 25 to be off
PUT http://4.156.161.23:8081/hardware/{{leftFanId}} HTTP/1.1
Content-Type: application/json
Accept: application/json

{
  "name": "left side fan",
  "port": "22",
  "desiredState": {
    "state": "ON",
    "level": "200"
  },
  "possibleStates": [
    "ON",
    "OFF"
  ],
  "offState": "OFF"
}
